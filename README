Features / Endpoints
1. Create / Analyze String

POST /strings

Request Body:

{
  "value": "Madam"
}


Response (201 Created):

{
  "id": "<sha256_hash>",
  "value": "Madam",
  "properties": {
    "length": 5,
    "is_palindrome": true,
    "unique_characters": 4,
    "word_count": 1,
    "sha256_hash": "<sha256_hash>",
    "character_frequency_map": {
      "m": 2,
      "a": 2,
      "d": 1
    }
  },
  "created_at": "2025-10-22T17:15:00Z"
}


Error Responses:

400 → Missing value field

409 → String already exists

2. Get All Strings

GET /strings

Optional Query Parameters:

is_palindrome=true|false

min_length=number

max_length=number

word_count=number

contains_character=character

Response (200 OK):

{
  "data": [ /* array of string objects */ ],
  "count": 1,
  "filters_applied": { /* query parameters */ }
}

3. Get Specific String

GET /strings/<string_value>

Response (200 OK):

{
  "id": "<sha256_hash>",
  "value": "Madam",
  "properties": { /* same as above */ },
  "created_at": "2025-10-22T17:15:00Z"
}


Error (404 Not Found) if string does not exist.

4. Delete a String

DELETE /strings/<string_value>

Response: 204 No Content

Error (404 Not Found) if string does not exist.

5. Natural Language Filtering

GET /strings/filter-by-natural-language?query=<your_query>

Example queries:

"all single word palindromic strings" → returns all strings with word_count=1 and is_palindrome=true

"strings longer than 10 characters" → returns strings with length > 10

"strings containing the letter z" → returns strings containing z

Response (200 OK):

{
  "data": [ /* array of matching strings */ ],
  "count": 1,
  "interpreted_query": {
    "original": "all single word palindromic strings",
    "parsed_filters": {
      "word_count": 1,
      "is_palindrome": true
    }
  }
}

Setup Instructions (Local)

Clone the repository:

git clone <your-github-repo-url>
cd string-analyzer-api


Create virtual environment and activate:

python -m venv venv
source venv/bin/activate   # Windows: venv\Scripts\activate


Install dependencies:

pip install -r requirements.txt


Create .env file (example):

FLASK_ENV=development
DATABASE_URL=sqlite:///strings.db
PORT=8080


Run locally:

python app.py
# or
flask run


Test endpoints in Postman or browser.

Dependencies

Flask==3.0.3

Flask-SQLAlchemy==3.1.1

SQLAlchemy==2.0.32

Werkzeug==3.0.3

gunicorn==23.0.0